name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image digest
        run: echo "Image pushed with digest ${{ steps.meta.outputs.digest }}"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pylint flake8

      - name: Lint with flake8
        run: |
          flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app.py --count --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Run tests
        run: |
          pytest tests/ -v --cov=. --cov-report=term-missing || echo "No tests found, skipping..."
        continue-on-error: true

      - name: Docker Compose health check
        run: |
          docker compose up -d
          sleep 30
          
          docker compose ps
          
          curl -f http://localhost:5000/health || exit 1
          
          docker compose exec -T db pg_isready -U clickuser -d clickdb || exit 1
          
          echo "All services are healthy"
          
          docker compose down

  deploy-docker:
    name: Deploy to Docker Compose
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment:
      name: docker-test
      url: http://localhost:5000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy with Docker Compose
        run: |
          docker compose down || true
          docker compose up -d

      - name: Wait for services to be ready
        run: |
          sleep 30
          curl -f http://localhost:5000/health || exit 1
          echo "Deployment successful"

      - name: Run smoke tests
        run: |
          curl -f http://localhost:5000/ | grep "Click Counter" || exit 1
          RESPONSE=$(curl -s -X POST http://localhost:5000/click)
          echo "Click response: $RESPONSE"
          echo "Smoke tests passed"

      - name: Deployment summary
        run: |
          echo "Deployment completed successfully!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "URL: http://localhost:5000"
          docker compose ps

  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment:
      name: kubernetes-production
      url: https://click-counter.local

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Update image in manifests
        run: |
          cd k8s
          # Update image tag to use the commit SHA
          sed -i "s|image: ghcr.io/USERNAME/REPO:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" web-deployment.yaml
          cat web-deployment.yaml | grep image:

      - name: Create namespace if not exists
        run: |
          kubectl create namespace click-counter --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          # Apply all manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/postgres-init-configmap.yaml
          kubectl apply -f k8s/postgres-pvc.yaml
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/postgres-service.yaml
          kubectl apply -f k8s/web-deployment.yaml
          kubectl apply -f k8s/web-service.yaml
          
          # Optional: Apply ingress and HPA if needed
          kubectl apply -f k8s/ingress.yaml || true
          kubectl apply -f k8s/hpa.yaml || true

      - name: Wait for database to be ready
        run: |
          kubectl wait --for=condition=ready pod \
            -l component=database \
            -n click-counter \
            --timeout=300s

      - name: Wait for rollout to complete
        run: |
          kubectl rollout status deployment/web -n click-counter --timeout=300s

      - name: Verify deployment
        run: |
          echo "Deployment Status:"
          kubectl get deployments -n click-counter
          kubectl get pods -n click-counter
          kubectl get services -n click-counter
          
          echo ""
          echo "Pod Details:"
          kubectl describe pods -l component=web -n click-counter | grep -A 5 "Status:"

      - name: Health check
        run: |
          # Wait a bit for services to stabilize
          sleep 10
          
          # Port forward to test service
          kubectl port-forward svc/web-service 8080:80 -n click-counter &
          PF_PID=$!
          sleep 5
          
          # Test health endpoint
          curl -f http://localhost:8080/health || exit 1
          echo "Health check passed"
          
          # Cleanup port forward
          kill $PF_PID || true

      - name: Run smoke tests
        run: |
          kubectl port-forward svc/web-service 8080:80 -n click-counter &
          PF_PID=$!
          sleep 5
          
          # Test homepage
          curl -f http://localhost:8080/ | grep "Click Counter" || exit 1
          
          # Test click endpoint
          RESPONSE=$(curl -s -X POST http://localhost:8080/click)
          echo "Click response: $RESPONSE"
          
          echo "Smoke tests passed"
          
          kill $PF_PID || true

      - name: Deployment summary
        if: success()
        run: |
          echo "Kubernetes Deployment Successful!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Namespace: click-counter"
          echo ""
          echo "Resource Status:"
          kubectl get all -n click-counter
          echo ""
          echo "Access application:"
          echo "  kubectl port-forward svc/web-service 8080:80 -n click-counter"
          echo "  Open: http://localhost:8080"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          
          # Rollback web deployment
          kubectl rollout undo deployment/web -n click-counter || true
          
          # Wait for rollback to complete
          kubectl rollout status deployment/web -n click-counter --timeout=120s || true
          
          echo "Rollback completed"
          kubectl get pods -n click-counter
          
          exit 1

